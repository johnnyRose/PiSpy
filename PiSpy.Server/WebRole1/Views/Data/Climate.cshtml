@model WebRole1.Models.DataViewModel
@{
	ViewBag.Title = "Index";
}

<h2>Data for @Model.PiSpyDevice.Name</h2>
<p class="text-muted">@Model.PiSpyDevice.Location | @Model.PiSpyDevice.Notes</p>

@Html.ActionLink("Back", "Index", "MySpies")

<hr />

<div class="row">
	<div class="col-md-12">

        <div class="form-inline">
            @using(Html.BeginForm())
            {
                @Html.AntiForgeryToken()
                
                <div class="form-group">
                    @Html.LabelFor(m => m.StartTime, new { @class = "control-label"})
                    @Html.EditorFor(m => m.StartTime, new { htmlAttributes = new { @class = "form-control" }})
                </div>

                <div class="form-group">
                    @Html.LabelFor(m => m.EndTime, new { @class = "control-label" })
                    @Html.EditorFor(m => m.EndTime, new { htmlAttributes = new { @class = "form-control" } })
                </div>
                
                <input type="submit" value="Submit" class="btn btn-primary" />
            }
        </div>

        <hr />


        <div id="legend"></div>
		<canvas id="canvas" height="300" width="400"></canvas>


		<table class="table table-striped table-responsive">
			<tr>
				<th>Time</th>
				<th>Temperature</th>
				<th>Humidity</th>
				<th>Dew Point</th>
			</tr>

			@foreach (var log in Model.DataLogs.OrderByDescending(m => m.Id))
			{
				<tr>
					<td>@log.TimeStamp.ToString()</td>
					<td>@log.TemperatureFahrenheit&#176;</td>
					<td>@log.Humidity %</td>
					<td>@log.DewPoint&#176;</td>
				</tr>
			}
		</table>
	</div>
</div>

@section Scripts {
	<script src="~/Scripts/chart.min.js"></script>

	<script type="text/javascript">

    var lineChartData = {
        labels: [
            "@Model.StartTime.ToString()",
            "@Model.GetInterval(1).ToString()",
            "@Model.GetInterval(2).ToString()",
            "@Model.GetInterval(3).ToString()",
            "@Model.GetInterval(4).ToString()",
            "@Model.GetInterval(5).ToString()",
            "@Model.EndTime.ToString()"
        ],
        datasets: [
			{
			    label: "Temperature",
			    fillColor: "rgba(0, 0, 0, 0)",
			    strokeColor: "rgba(230,0,0,1)",
			    pointColor: "rgba(230,0,0,1)",
			    pointStrokeColor: "#fff",
			    pointHighlightFill: "rgba(230,0,0,1)",
			    pointHighlightStroke: "rgba(230,0,0,1)",
			    data: [ @(string.Join(",", Model.DataLogs.Select(m => m.TemperatureFahrenheit)))]
			},
            {
                label: "Dew Point",
                fillColor: "rgba(0, 0, 0, 0)",
                strokeColor: "rgba(133,184,212,1)",
                pointColor: "rgba(133,184,212,1)",
                pointStrokeColor: "#fff",
                pointHighlightFill: "rgba(133,184,212,1)",
                pointHighlightStroke: "rgba(133,184,212,1)",
                data: [ @(string.Join(",", Model.DataLogs.Select(m => m.DewPoint)))]
            },
			{
			    label: "Humidity",
			    fillColor: "rgba(0, 0, 0, 0)",
			    strokeColor: "rgba(0,0,220,1)",
			    pointColor: "rgba(0,0,220,1)",
			    pointStrokeColor: "#fff",
			    pointHighlightFill: "rgba(0,0,220,1)",
			    pointHighlightStroke: "rgba(0,0,220,1)",
			    data: [ @(string.Join(",", Model.DataLogs.Select(m => m.Humidity)))]
			},

        ]
    }

    window.onload = function () {
        var ctx = document.getElementById("canvas").getContext("2d");
        window.myLine = new Chart(ctx).Line(lineChartData, {
            responsive: true,
            bezierCurve: false,
        });
        document.getElementById('legend').innerHTML = myLine.generateLegend();
    }

</script>
}
